{"version":3,"sources":["components/Thetable2.js","components/FullSchedule.js","components/TodayIs.js","components/TodaysSchedule.js","App.js","serviceWorker.js","index.js"],"names":["rows","schedule","map","period","subject","teacher","classlink","key","href","Thetable2","Table","striped","bordered","hover","variant","classtimes","i","day","time","FullSchedule","colSpan","TodayIs","d","Date","weekday","Array","n","getDay","thisDay","filter","s","find","t","todaystime","TodaysSchedule","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71e74656.chunk.js","sourcesContent":["import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport schedule from './schedule.json';\r\n\r\n\r\nconst rows = schedule.map( ({ period, subject, teacher, classlink }) => {\r\n    return (\r\n        <tr key={period}>\r\n        <td>{period}</td>\r\n        <td>{subject}</td>\r\n        <td>{teacher}</td>\r\n        <td><a href={classlink}><div>{classlink}</div></a></td>\r\n        </tr>\r\n    )\r\n});\r\n\r\nconst Thetable2 = () =>  {\r\n    return (\r\n                    <Table striped bordered hover variant=\"dark\">\r\n                <thead>\r\n                    <tr>\r\n                    <th>Period</th>\r\n                    <th>Subject</th>\r\n                    <th>Teacher</th>\r\n                    <th>Class Link</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {rows}\r\n                </tbody>\r\n                </Table>\r\n    )\r\n}\r\n\r\nexport default Thetable2;","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport schedule from './schedule.json';\r\n\r\n\r\nconst rows = schedule.map( ({ period, subject, classtimes }) => {\r\n    return (\r\n        <tr key={period}>\r\n        <td>{period}</td>\r\n        <td>{subject}</td>\r\n        <td>{classtimes.map(i =>\r\n            <div>\r\n                {i.day}\r\n            </div>)}</td>\r\n        <td>{classtimes.map(i =>\r\n            <div>\r\n                {i.time}\r\n            </div>)}</td>\r\n        </tr>\r\n    )\r\n});\r\n\r\nconst FullSchedule = () =>  {\r\n    return (\r\n                    <Table striped bordered hover variant=\"dark\">\r\n                <thead>\r\n                    <tr>\r\n                        <th colSpan=\"4\">This is your full schedule</th>\r\n                    </tr>\r\n                    <tr>\r\n                    <th>Period</th>\r\n                    <th>Subject</th>\r\n                    <th>Day</th>\r\n                    <th>Time</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {rows}\r\n                </tbody>\r\n                </Table>\r\n    )\r\n}\r\n\r\nexport default FullSchedule;","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport './TodayIs.css'\r\n\r\nconst TodayIs = () => {\r\n    const d = new Date();\r\n    var weekday = new Array(7);\r\n    weekday[0] = \"Sunday\";\r\n    weekday[1] = \"Monday\";\r\n    weekday[2] = \"Tuesday\";\r\n    weekday[3] = \"Wednesday\";\r\n    weekday[4] = \"Thursday\";\r\n    weekday[5] = \"Friday\";\r\n    weekday[6] = \"Saturday\";    \r\n    const n = weekday[d.getDay()];\r\n    return (\r\n        <div>\r\n            <Table striped bordered hover variant=\"dark\">\r\n                <thead>\r\n                    <tr>\r\n                    <th>Today is {n}</th>\r\n                    </tr>\r\n                </thead>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\n  \r\n\r\nexport default TodayIs;","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport schedule from './schedule.json';\r\n\r\n\r\n\r\nconst thisDay = () => {\r\n    const d = new Date();\r\n    var weekday = new Array(7);\r\n    weekday[0] = \"Sunday\";\r\n    weekday[1] = \"Monday\";\r\n    weekday[2] = \"Tuesday\";\r\n    weekday[3] = \"Wednesday\";\r\n    weekday[4] = \"Thursday\";\r\n    weekday[5] = \"Friday\";\r\n    weekday[6] = \"Saturday\";    \r\n    const n = weekday[d.getDay()];\r\n    return (n);\r\n}\r\n\r\n//filter only todays\r\nconst todays = schedule.filter(s => {\r\n    return s.classtimes.find(t => t.day === thisDay())\r\n});\r\n\r\nconst rows = todays.map( ({ period, subject, classlink, classtimes }) => {\r\n    const todaystime = classtimes.find(t => t.day === thisDay());\r\n    return (\r\n        <tr key={period}>\r\n        <td>{period}</td>\r\n        <td>{subject} \r\n            <div>\r\n            <a href={classlink}><div>{classlink}</div></a>\r\n            </div>\r\n        </td>\r\n        <td>\r\n            <div>\r\n                {todaystime.day}\r\n            </div>\r\n        </td>\r\n        <td>\r\n            <div>\r\n                {todaystime.time}\r\n            </div>\r\n        </td>\r\n        </tr>\r\n    )\r\n});\r\n\r\nconst TodaysSchedule = () =>  {\r\n    return (\r\n                    <Table striped bordered hover variant=\"dark\">\r\n                <thead>\r\n                    <tr>\r\n                        <th colSpan=\"4\">This is today's schedule</th>\r\n                    </tr>\r\n                    <tr>\r\n                    <th>Period</th>\r\n                    <th>Subject</th>\r\n                    <th>Day</th>\r\n                    <th>Time</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {rows}\r\n                </tbody>\r\n                </Table>\r\n    )\r\n}\r\n\r\nexport default TodaysSchedule;","import React, {Component} from 'react';\nimport Thetable2 from './components/Thetable2';\nimport './App.css';\nimport FullSchedule from './components/FullSchedule';\nimport TodayIs from './components/TodayIs';\nimport TodaysSchedule from './components/TodaysSchedule';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Thetable2 />\n      <div>\n        <div>\n        <TodayIs />\n        <TodaysSchedule />\n        </div>\n        <FullSchedule />\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}